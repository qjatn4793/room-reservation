name: rr
version: "3.9"
services:
  postgres_room:
    image: postgres:16
    container_name: rr-postgres-room
    restart: unless-stopped
    environment:
      POSTGRES_DB: room_reservation
      POSTGRES_USER: room
      POSTGRES_PASSWORD: roompw
    ports:
      - "5432:5432"
    volumes:
      - pgdata_room:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U room -d room_reservation"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres_pay:
    image: postgres:16
    container_name: rr-postgres-pay
    restart: unless-stopped
    environment:
      POSTGRES_DB: pay
      POSTGRES_USER: pay
      POSTGRES_PASSWORD: paypw
    ports:
      - "5433:5432"
    volumes:
      - pgdata_pay:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pay -d pay"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    container_name: rr-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"
      ZOOKEEPER_TICK_TIME: "2000"
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    container_name: rr-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    ports:
      - "9092:9092"     # for containers
      - "29092:29092"   # for host/IntelliJ
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  pgdata_room: {}
  pgdata_pay: {}
